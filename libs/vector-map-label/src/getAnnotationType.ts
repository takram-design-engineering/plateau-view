import { fromPairs } from 'lodash'

const annotationTypes = {
  municipalities: [
    110, // 市区町村
    140 // 都道府県
  ],
  towns: [
    120, // 飛び地
    130, // 郡
    210, // 公称（町字名）
    220, // 集落名称（通称）
    800 // 居住地名（大字・町・丁目）
  ],
  roads: [
    411 // 道路名
  ],
  railways: [
    421 // 鉄道路線名
  ],
  stations: [
    422 // 鉄道駅名
  ],
  landmarks: [
    412, // 道路施設（IC、PA、道の駅等）
    413, // 道路構造物（橋、トンネル等）
    423, // 鉄道構造物（橋、トンネル、操車場等）
    431, // 港湾
    432, // 港湾施設（フェリー発着所、埠頭等）
    441, // 空港名
    511, // 構造物名称（高塔、煙突等）
    521, // ダム
    522, // 堰
    523, // 河川・海岸施設（水門、堤防）
    531, // 土地利用名（演習場、ゴルフ場、遊園地、建設予定地等）
    532, // 史跡名勝天然記念物
    533, // 漁港
    534, // 公園
    611, // 合同庁舎
    612, // 国の機関（合同庁舎、矯正施設及び自衛隊を除く）
    613, // 矯正施設（刑務所、少年院等）
    615, // 自衛隊・米軍
    621, // 都道府県庁、北海道の総合振興局・振興局、支庁
    631, // 大学・大学院
    632, // 短期大学
    633, // 高等専門学校
    634, // 特殊学校
    651, // 水族館・動植物園
    653, // 発電所
    661, // 神社
    662, // 寺院
    671, // 商業施設
    673, // 文教施設
    681, // その他の主要・著名な建物
    860, // 道の駅
    870, // 公園
    880, // 国の機関
    881, // 地方の機関
    882, // 保健所
    883, // 警察
    884, // 消防
    885, // 学校
    886, // 病院
    887, // 郵便局
    888, // 指定公共機関
    889, // 博物館
    890, // 老人ホーム
    899 // その他
  ],
  topography: [
    311, // 山の総称
    312, // 山、岳、峰等
    313, // 尖峰、丘、塚等
    314, // 山、岳、峰等（3000m以上）
    315, // 山、岳、峰等（1000m以上）
    316, // 山、岳、峰等（1000m未満）
    321, // 湖、沼、池、浦等
    322, // 河川、用水等
    323, // 沢、瀬、淵、瀞、谷、峡、雪渓、河原、州、滝、浜、崎、半島、尻、島等
    331, // 高原、原、森、林、砂丘、湿原
    332, // 岩、溶岩、崖、鍾乳洞、温泉、湧水、噴泉、噴火口、峠、坂等
    333, // 山脈、山地、平原（ZL4-7）
    341, // 海、湾、灘、淵、浦、瀬、海峡、瀬戸等
    342, // 海岸、浜、半島
    343, // 岬、鼻、崎、磯、敷等
    344, // 海、灘
    345, // 湾、淵、浦、瀬、海峡、瀬戸等、水道
    346, // 半島
    347, // 海岸、浜、洲、干潟
    348, // 海山、海嶺、海盆等
    351, // 群島、列島、島の総称等
    352, // 島
    353, // はえ、岩礁等
    361, // 到達注記
    810, // 山
    820, // 湖沼
    822, // 滝
    830, // 高原、平原、湿原
    831, // 温泉、泉、噴気口
    832, // 峠
    840, // 海峡、水道
    841, // 湾、灘
    842, // 海岸、浜、磯
    843, // 岬、崎、鼻
    850 // 島
  ]
}

export type AnnotationType = keyof typeof annotationTypes

const typeMap: Record<number, AnnotationType | undefined> = fromPairs(
  Object.entries(annotationTypes).flatMap(([type, codes]) =>
    codes.map(code => [code, type])
  )
)

export function getAnnotationType(code: number): AnnotationType | undefined {
  return typeMap[code]
}
